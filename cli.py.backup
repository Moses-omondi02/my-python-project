import click
from datetime import datetime
from typing import List, Dict, Optional
from database import get_db, init_db, drop_db
from models import Voter
from utils import validate_date, validate_country_code, format_voter_info, format_address_info, create_voter_dict, display_voters_table
from sqlalchemy.orm import Session
from tabulate import tabulate

# Create the main CLI group
@click.group()
def cli():
    """Voter Registration System CLI - Manage voter registrations"""
    pass

# Database management commands
@cli.command()
def init_db():
    """Initialize the database tables"""
    init_db()
    click.echo("Database tables created successfully!")

@cli.command()
def drop_db():
    """Drop all database tables"""
    if click.confirm('Are you sure you want to drop all tables? This cannot be undone!'):
        drop_db()
        click.echo("Database dropped successfully!")

# Voter management commands
@cli.command()
@click.option('--national-id', prompt='National ID Number', help='National identification number')
@click.option('--title', prompt='Title (Mr/Mrs/Ms/Dr)', default='', help='Title of the voter')
@click.option('--first-name', prompt='First Name', help='First name of the voter')
@click.option('--middle-name', prompt='Middle Name', default='', help='Middle name of the voter')
@click.option('--last-name', prompt='Last Name', help='Last name of the voter')
@click.option('--dob', prompt='Date of Birth (YYYY-MM-DD)', help='Date of birth')
@click.option('--password', prompt='Password', hide_input=True, confirmation_prompt=True, help='Login password')
def register_voter(national_id, title, first_name, middle_name, last_name, dob, password):
    """Register a new voter"""
    try:
        # Validate date format
        if not validate_date(dob):
            click.echo("Error: Invalid date format. Use YYYY-MM-DD")
            return
        
        # Create voter data
        voter_data = create_voter_dict(
            national_id=national_id,
            title=title,
            first_name=first_name,
            middle_name=middle_name,
            last_name=last_name,
            dob=dob,
            password=password
        )
        
        # Save to database
        db = next(get_db())
        voter = Voter(**voter_data)
        db.add(voter)
        db.commit()
        
        click.echo(f"‚úÖ Voter {first_name} {last_name} registered successfully!")
        
    except Exception as e:
        click.echo(f"‚ùå Error registering voter: {str(e)}")

@cli.command()
@click.option('--national-id', prompt='National ID Number', help='National ID to search for')
def find_voter(national_id):
    """Find a voter by national ID"""
    try:
        db = next(get_db())
        voter = db.query(Voter).filter(Voter.national_id == national_id).first()
        
        if voter:
            click.echo(format_voter_info(voter))
        else:
            click.echo(f"‚ùå No voter found with National ID: {national_id}")
            
    except Exception as e:
        click.echo(f"‚ùå Error finding voter: {str(e)}")

@cli.command()
def list_voters():
    """List all registered voters"""
    try:
        db = next(get_db())
        voters = db.query(Voter).all()
        
        if not voters:
            click.echo("‚ÑπÔ∏è  No voters registered yet.")
            return
        
        click.echo("\nüìã Registered Voters:")
        display_voters_table(voters)
        click.echo(f"\nTotal voters: {len(voters)}")
            
    except Exception as e:
        click.echo(f"‚ùå Error listing voters: {str(e)}")

@cli.command()
@click.option('--national-id', prompt='National ID to delete', help='National ID of voter to delete')
def delete_voter(national_id):
    """Delete a voter by national ID"""
    try:
        db = next(get_db())
        voter = db.query(Voter).filter(Voter.national_id == national_id).first()
        
        if not voter:
            click.echo(f"‚ùå No voter found with National ID: {national_id}")
            return
        
        if click.confirm(f'Are you sure you want to delete voter {voter.first_name} {voter.last_name}?'):
            db.delete(voter)
            db.commit()
            click.echo(f"‚úÖ Voter {voter.first_name} {voter.last_name} deleted successfully!")
            
    except Exception as e:
        click.echo(f"‚ùå Error deleting voter: {str(e)}")

if __name__ == '__main__':
    cli()